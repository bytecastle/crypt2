func,lang,mod,syntax,tips,ranking
create dataframe or table or array,R,dplyr,"tibble({col1}=c({val1},{val2}), {col2}=c({val3},{val4}))","In DPLYR we use tibbles, which can be looked at as data frames! It has the same code syntax but instead of tibble() use data.frame()",0
view table,R,dplyr,glimpse({df}),You can also use View(),0
filter rows,R,dplyr,{df} %>% filter({col1}>={value} & {col2}<{value}),This is to filter the observations in a dataset based on values of the columns,
select columns,R,dplyr,"{df} %>% select({col1}, {col2})",Here we can select which columns we want to see,
filter rows and select columns,R,dplyr,"{df} %>% filter({col1}>= {value} & {col2}< {value}) %>% select({col1}, {col2})",We combine selecting observations with selecting columns we want to see,
group data,R,dplyr,"{df} %>% group_by({col1}, {col2})",Grouping data is really useful when you want to summarise data and dont want every single observation from the original dataset. Usually we find group_by goes with summarise functions,
order data in ascending order,R,dplyr,{df} %>% arrange({col1}),,
order data in descending order,R,dplyr,{df} %>% arrange(desc({col1})),,
rename columns,R,dplyr,"{df} %>% rename(new_col_name_{col1} = {col1},new_col_name_{col2} = {col2})",,
remove duplicate rows,R,dplyr,{df} %>% distinct(),,
randomly select fraction of rows,R,dplyr,"{df} %>% sample_frac(0.5, replace = TRUE)",,
randomly select n rows,R,dplyr,"{df} %>% sample_n(10, replace = TRUE)",,
select rows by position,R,dplyr,{df} %>% slice(10:15),,
select all columns except named column,R,dplyr,"{df} %>% select(-{col1},-{col2})",,
summarise data into single row of values,R,dplyr,{df} %>% summarise(avg = mean({col1})),,
apply summary function to each column,R,dplyr,{df} %>% summarise_each(funs(mean)),,
count number of rows with each unique value of variable,R,dplyr,"{df} %>% count({col1},{col2})",,
add a new column to the dataset,R,dplyr,{df} %>% mutate(new_column = 'new value'),,
apply window function to each column,R,dplyr,{df} %>% mutate_each(funs(cumsum)),,
add a new column and drop the original columns,R,dplyr,{df} %>% transmute(new_column = 'new value'),,
left join,R,dplyr,"{df} %>% left_join(another_df, by = '{col1}')",,
right join,R,dplyr,"{df} %>% right_join(another_df, by = '{col1}')",,
inner join,R,dplyr,"{df} %>% inner_join(another_df, by = '{col1}')",,
full join,R,dplyr,"{df} %>% full_join(another_df, by = '{col1}')",,
semi join,R,dplyr,"{df} %>% semi_join(another_df, by = '{col1}')",,
anti join,R,dplyr,"{df} %>% anti_join(another_df, by = '{col1}')",,
create dataframe or table or array,R,data.table,"data.table({col1}=c({val1},{val2}), {col2}=c({val3},{val4}))","To use DATA.TABLE you first need to convert your data frame into a data.table object. If you forget to do so, no problem errors or warnings will remind you!
If you already have a data frame, you can make it a data.table object by simply writing setDT(df) or as.data.table(df)",
view table,R,data.table,View({df}),,
filter rows,R,data.table,"{df}[{col1} >= {value} & {col2} < {value},]",,
select columns,R,data.table,"{df}[,.({col1}, {col2})]",,
filter rows and select columns,R,data.table,"{df}[{col1} >= {value} & {col2} < {value},][,.({col1}, {col2})]",,
group data,R,data.table,"{df}[,j,by=.({col1}, {col2})]","The j stands for the columns you wish to summarise and is necessary i.e. you will get an error/warning if you write dt[,,by=.(col1)] You need to provide something in place of j",
order data in ascending order,R,data.table,"setorder({df},{col1})",,
order data in descending order,R,data.table,"setorder({df},-{col1})",,
rename columns,R,data.table,"setnames({df},c('{col1}','{col2}'),c('new_col_name_{col1}','new_col_name_{col2}'))",,
remove duplicate rows,R,data.table,unique({df}),,
randomly select fraction of rows,R,data.table,,,
randomly select n rows,R,data.table,,,
select rows by position,R,data.table,"{df}[10:15,]",,
select all columns except named column,R,data.table,"{df}[,c(""{col1}"",""{col2}""):= NULL]",,
summarise data into single row of values,R,data.table,"{df}[, .(avg = mean({col1}))]",,
apply summary function to each column,R,data.table,"{df}[, lapply(.SD, mean), .SDcols = c(""{col1}"", ""{col2}"")]",,
count number of rows with each unique value of variable,R,data.table,"uniqueN({df}, by = c(""{col1}"", ""{col2}""))",,
add a new column to the dataset,R,data.table,"{df}[,new_column:='new value']",,
apply window function to each column,R,data.table,"{df}[, paste0(c(""{col1}""), ""_new_col"") := lapply(.SD, cumsum), .SDcols = (c(""{col1}"")]",,
add a new column and drop the original columns,R,data.table,"{df}[,new_column:='new value'][,c(""{col1}"",""{col2}""):= NULL]",,
left join,R,data.table,"{df}[another_df, on = ""{col1}"", names(another_df) := mget(paste0(""i."",names(another_df)))]",,
right join,R,data.table,"another_df[{df}, on = ""{col1}"", names({df}) := mget(paste0(""i."",names({df})))]",,
inner join,R,data.table,"{df}[another_df, on = .({col1} = {col1}), nomatch = 0]",,
full join,R,data.table,"merge({df},another_df,by=""{col1}"",all=TRUE)",,
semi join,R,data.table,"names_cols = names({df}) <br/> {df}[another_df, on = .({col1} = {col1}), nomatch = 0][,..names_cols]",,
anti join,R,data.table,"setDT({df})[!another_df, on = ""a""]",,
create dataframe or table or array,Python,numpy,,,
view table,Python,numpy,,,
filter rows,Python,numpy,,,
select columns,Python,numpy,,,
filter rows and select columns,Python,numpy,,,
group data,Python,numpy,,,
order data in ascending order,Python,numpy,,,
order data in descending order,Python,numpy,,,
rename columns,Python,numpy,,,
remove duplicate rows,Python,numpy,,,
randomly select fraction of rows,Python,numpy,,,
randomly select n rows,Python,numpy,,,
select rows by position,Python,numpy,,,
select all columns except named column,Python,numpy,,,
summarise data into single row of values,Python,numpy,,,
apply summary function to each column,Python,numpy,,,
count number of rows with each unique value of variable,Python,numpy,,,
add a new column to the dataset,Python,numpy,,,
apply window function to each column,Python,numpy,,,
add a new column and drop the original columns,Python,numpy,,,
left join,Python,numpy,,,
right join,Python,numpy,,,
inner join,Python,numpy,,,
full join,Python,numpy,,,
semi join,Python,numpy,,,
anti join,Python,numpy,,,
create dataframe or table or array,Python,pandas,,,
view table,Python,pandas,,,
filter rows,Python,pandas,,,
select columns,Python,pandas,,,
filter rows and select columns,Python,pandas,,,
group data,Python,pandas,,,
order data in ascending order,Python,pandas,,,
order data in descending order,Python,pandas,,,
rename columns,Python,pandas,,,
remove duplicate rows,Python,pandas,,,
randomly select fraction of rows,Python,pandas,,,
randomly select n rows,Python,pandas,,,
select rows by position,Python,pandas,,,
select all columns except named column,Python,pandas,,,
summarise data into single row of values,Python,pandas,,,
apply summary function to each column,Python,pandas,,,
count number of rows with each unique value of variable,Python,pandas,,,
add a new column to the dataset,Python,pandas,,,
apply window function to each column,Python,pandas,,,
add a new column and drop the original columns,Python,pandas,,,
left join,Python,pandas,,,
right join,Python,pandas,,,
inner join,Python,pandas,,,
full join,Python,pandas,,,
semi join,Python,pandas,,,
anti join,Python,pandas,,,
create dataframe or table or array,Postgresql,No Library,,,
view table,Postgresql,No Library,,,
filter rows,Postgresql,No Library,,,
select columns,Postgresql,No Library,,,
filter rows and select columns,Postgresql,No Library,,,
group data,Postgresql,No Library,,,
order data in ascending order,Postgresql,No Library,,,
order data in descending order,Postgresql,No Library,,,
rename columns,Postgresql,No Library,,,
remove duplicate rows,Postgresql,No Library,,,
randomly select fraction of rows,Postgresql,No Library,,,
randomly select n rows,Postgresql,No Library,,,
select rows by position,Postgresql,No Library,,,
select all columns except named column,Postgresql,No Library,,,
summarise data into single row of values,Postgresql,No Library,,,
apply summary function to each column,Postgresql,No Library,,,
count number of rows with each unique value of variable,Postgresql,No Library,,,
add a new column to the dataset,Postgresql,No Library,,,
apply window function to each column,Postgresql,No Library,,,
add a new column and drop the original columns,Postgresql,No Library,,,
left join,Postgresql,No Library,,,
right join,Postgresql,No Library,,,
inner join,Postgresql,No Library,,,
full join,Postgresql,No Library,,,
semi join,Postgresql,No Library,,,
anti join,Postgresql,No Library,,,
